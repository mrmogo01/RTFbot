import logging
from aiogram import Bot, Dispatcher, executor, types
from fuzzywuzzy import process
import re
from sqlalchemy import create_engine, Column, String, Integer, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Text

API_TOKEN = '6986827387:AAFq38U-MEzy9sw1hPBuH50NRmKFjDFAMSM'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ò–ò
is_ai_mode_on = False
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
engine = create_engine('sqlite:///bot.db')
Base = declarative_base()

posts = {
    1: {"text": "// –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è —Ç–µ–±—è üë®üèª‚Äçüíª\n\n–¶–µ–Ω—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ò–†–ò–¢-–†–¢–§ –∏—â–µ—Ç —Å–µ–±–µ –≤ –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—á–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –¢—ã —Å–º–æ–∂–µ—à—å –ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—Ñ–µ—Ä–µ –∞–Ω–∞–ª–∏–∑–∞ —É—á–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:\nüîπ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç,\nüîπ —É—Å—Ç–æ–π—á–∏–≤–∞—è —Ç—è–≥–∞ –∫ —Ä–∞–∑–≤–∏—Ç–∏—é,\nüîπ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è,\nüîπ –≤–ª–∞–¥–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ò–ò,\nüîπ –Ω–∞–≤—ã–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö,\nüîπ —É–º–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö,\nüîπ –≤–ª–∞–¥–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏—Ö —á–µ—Ä–µ–∑ API,\nüîπ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤,\nüîπ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.\n\n–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n‚Äî –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—Ö–∞),\n‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤),\n‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏),\n‚Äî —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö).\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã:\nüåÄ —Å–ª–æ–∂–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏,\nüåÄ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ (–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ —Ñ–æ—Ä—É–º—ã),\nüåÄ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—é,\nüåÄ —É—á–µ—Ç —É—á–µ–±–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤).\n\n–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ üöÄ", "link": "https://vk.com/wall-6214974_18806", "feature": "–í–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"},
    2: {"text": "// –û—Ç–¥–æ—Ö–Ω–µ–º –≤–º–µ—Å—Ç–µ?\n\n–í–µ—Å–Ω–∞ –Ω–µ —Ä–∞–¥—É–µ—Ç —Ç–µ–ø–ª–æ–π –ø–æ–≥–æ–¥–æ–π, –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Ç—Ä—É–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–µ—Å—Å–∏–∏ –∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤ üò¢ –ù–æ –Ω–µ –≤—Ä–µ–º—è –ø–µ—á–∞–ª–∏—Ç—å—Å—è!\n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–±–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç —É—á–µ–±—ã –∏ –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –º—É–∑—ã–∫–∏ –Ω–∞ ¬´–í–∏–±—Ä–∞—Ü–∏—è—Ö –ª–µ—Ç–∞¬ª. –≠—Ç–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–≤–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–≤–æ–µ–π –∏–≥—Ä—ã, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –ø—Ä–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–ø–ª–æ –ø–µ—Å–µ–Ω ü•∞\n\n–ó–∞–ø–æ–º–∏–Ω–∞–π –º–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è —É—é—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏:\n‚ú® 31 –º–∞—è, 17:30,\n‚ú® –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –ò–†–ò–¢-–†–¢–§ (–†-044).\n\n–ê —Ç–∞–∫–∂–µ –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π, —Å–æ–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –∏–∑ 4-6 —á–µ–ª–æ–≤–µ–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!", "link": "https://vk.com/wall-6214974_18791", "feature": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"},
    3: {"text": "// –ù–∞—É—á–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üî¨\n\n–ù–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å–ø–µ–≤–∞—é—â–∏—Ö —Å–æ–≤–º–µ—â–∞—Ç—å —É—á–µ–±—É —Å –Ω–∞—É—á–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö –Ω–∞ —à–æ–∫–æ–ª–∞–¥–∫–∏. –°—Ç—É–¥–µ–Ω—Ç—ã –ò–†–ò–¢-–†–¢–§ –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç—Å—è –∫ —É—á–∞—Å—Ç–∏—é –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é ¬´–ò–ù–¢–ï–† ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞¬ª üì°\n\n–í—ã–±–∏—Ä–∞–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –¥–æ–∫–ª–∞–¥–∞:\nüîπ–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è;\nüîπ–±–∏–æ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è;\nüîπ—Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Äî –°–í–ß-—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏;\nüîπ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n\n–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://vk.cc/cvuD2q", "link": "https://vk.com/wall-6214974_18314", "feature": "–ù–∞—É–∫–∞"},
    4: {"text": "// –°–ø–æ—Ä—Ç, –£—Ä–§–£, –ü–æ–ø–æ–≤! üèÖ\n\n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–º—è—Ç—å—Å—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–∏–ª—å–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –∏ –ª–æ–≤–∫–∏–π. –£–∂–µ 5 –º–∞—è –ø—Ä–æ–π–¥—É—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É –∏ —Ç–µ–Ω–Ω–∏—Å—É –≤ —Ä–∞–º–∫–∞—Ö –∫—É–±–∫–∞ –ü–æ–ø–æ–≤–∞.\n\n–°–∫–æ—Ä–µ–µ —Å–æ–±–∏—Ä–∞–π –≤–æ–ª–µ–π–±–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç 6 –¥–æ 8 —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ —Ä–µ—à–∞–π—Å—è –µ–¥–∏–Ω–æ–ª–∏—á–Ω–æ –ø–æ–±–æ—Ä–æ—Ç—å—Å—è –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º —Ç–µ–Ω–Ω–∏—Å–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ.\n\nüèê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–æ–ª–µ–π–±–æ–ª:\nüèì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç–µ–Ω–Ω–∏—Å:\n\n–ß–∏—Ç–∞–π –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö –ø–æ–¥ –ø–æ—Å—Ç–æ–º. –ê –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ –ú–∞–∫—Å–∏–º—É.\n–ü—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç —Å–∏–ª—å–Ω–µ–π—à–∏–π! üí™", "link": "https://vk.com/wall-6214974_18506", "feature": "–°–ø–æ—Ä—Ç"}
}

# –û–±—ä—è–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—É—á–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class QAPair(Base):
    __tablename__ = 'qa_pairs'
    question = Column(String, primary_key=True)
    answer = Column(Text)

class RegistrationData(Base):
    __tablename__ = 'registration_data'
    id = Column(Integer, primary_key=True)
    full_name = Column(String)
    academic_group = Column(String)
    study_form = Column(String)
    payment_type = Column(String)
    direction = Column(String)
    course = Column(Integer)

class UserPostPreference(Base):
    __tablename__ = 'user_post_preferences'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('registration_data.id'))
    post_id = Column(Integer)
    preference = Column(String)  # 'like' or 'dislike'



# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

REGISTRATION_STEPS = [
    "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:",
    "–í–≤–µ–¥–∏—Ç–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É:",
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:",
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
    "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:"
]
current_step = 0
registration_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
qa_pairs = {pair.question: pair.answer for pair in session.query(QAPair).all()}

# –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
SIMILARITY_THRESHOLD = 70

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global current_step, registration_data
    current_step = 0
    registration_data = {}
    await message.answer(REGISTRATION_STEPS[current_step])


@dp.message_handler()
async def register_data(message: types.Message):
    global current_step, registration_data

    if REGISTRATION_STEPS[current_step] == "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:":
        if message.text not in ["–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", "–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, –°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç")
            return
    elif REGISTRATION_STEPS[current_step] == "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:":
        if message.text not in ["–ë—é–¥–∂–µ—Ç", "–ö–æ–Ω—Ç—Ä–∞–∫—Ç"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ë—é–¥–∂–µ—Ç, –ö–æ–Ω—Ç—Ä–∞–∫—Ç")
            return

    registration_data[REGISTRATION_STEPS[current_step]] = message.text
    current_step += 1

    if current_step < len(REGISTRATION_STEPS):
        await message.answer(REGISTRATION_STEPS[current_step])

        if REGISTRATION_STEPS[current_step] == "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton("–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"), types.KeyboardButton("–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç")]
                ],
                resize_keyboard=True
            ))
        elif REGISTRATION_STEPS[current_step] == "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:", reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton("–ë—é–¥–∂–µ—Ç"), types.KeyboardButton("–ö–æ–Ω—Ç—Ä–∞–∫—Ç")]
                ],
                resize_keyboard=True
            ))
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –ø–æ—Å—Ç—ã")
        await send_posts(message)
        await send_welcome(message)


def save_to_database(data):
    registration = RegistrationData(
        full_name=data["–í–≤–µ–¥–∏—Ç–µ –§–ò–û:"],
        academic_group=data["–í–≤–µ–¥–∏—Ç–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É:"],
        study_form=data["–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:"],
        payment_type=data["–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:"],
        direction=data["–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"],
        course=int(data["–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:"])
    )
    session.add(registration)
    session.commit()

async def send_posts(message: types.Message):
    for post_id, post_info in posts.items():
        markup = types.InlineKeyboardMarkup()
        like_button = types.InlineKeyboardButton("–õ–∞–π–∫", callback_data=f"like_{post_id}")
        dislike_button = types.InlineKeyboardButton("–î–∏–∑–ª–∞–π–∫", callback_data=f"dislike_{post_id}")
        markup.add(like_button, dislike_button)
        await bot.send_message(message.chat.id, f"{post_info['text']} {post_info['link']}", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('like_'))
async def process_like(callback_query: types.CallbackQuery):
    post_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id  # Assuming user ID is from the Telegram user ID
    # Save to database
    preference = UserPostPreference(user_id=user_id, post_id=post_id, preference='like')
    session.add(preference)
    session.commit()
    await bot.answer_callback_query(callback_query.id, "–í–∞—à –≤—ã–±–æ—Ä '–ª–∞–π–∫' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('dislike_'))
async def process_dislike(callback_query: types.CallbackQuery):
    post_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id  # Assuming user ID is from the Telegram user ID
    # Save to database
    preference = UserPostPreference(user_id=user_id, post_id=post_id, preference='dislike')
    session.add(preference)
    session.commit()
    await bot.answer_callback_query(callback_query.id, "–í–∞—à –≤—ã–±–æ—Ä '–¥–∏–∑–ª–∞–π–∫' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")



@dp.message_handler()
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ò–ò")
    button2 = types.KeyboardButton("–ü—Ä–æ—Ñ—Å–æ—é–∑")
    markup.add(button1, button2)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram –±–æ—Ç.", reply_markup=markup)


@dp.message_handler(lambda message: message.text == "–ò–ò")
async def turn_on_ai_mode(message: types.Message):
    global is_ai_mode_on
    is_ai_mode_on = True
    await message.answer("–†–µ–∂–∏–º –ò–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")


@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Ñ—Å–æ—é–∑")
async def turn_off_ai_mode(message: types.Message):
    global is_ai_mode_on
    is_ai_mode_on = False
    await message.answer("–†–µ–∂–∏–º –ò–ò –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")


@dp.message_handler(commands=['train'])
async def train_bot(message: types.Message):
    global qa_pairs
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        match = re.match(r'/train\s+(.+?):\s+(.+)', message.text)
        if match:
            question = match.group(1).strip()
            answer = match.group(2).strip()
            qa_pair = QAPair(question=question, answer=answer)
            session.add(qa_pair)
            session.commit()
            qa_pairs[question] = answer
            await message.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω –Ω–∞ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ –∏ –æ—Ç–≤–µ—Ç–µ.")
        else:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    except Exception as e:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")


@dp.message_handler()
async def respond_to_message(message: types.Message):
    global is_ai_mode_on
    if is_ai_mode_on:
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –ò–ò –≤–∫–ª—é—á–µ–Ω, –∏—â–µ–º –æ—Ç–≤–µ—Ç –≤ –æ–±—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if message.text in qa_pairs:
            await message.answer(qa_pairs[message.text])
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            most_similar_question, similarity = process.extractOne(message.text, qa_pairs.keys())
            if similarity >= SIMILARITY_THRESHOLD:
                await message.answer(qa_pairs[most_similar_question])
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
