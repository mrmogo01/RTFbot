
import telebot
from aiogram import Bot, Dispatcher, types
import os
from google.cloud import dialogflow
from google.cloud.dialogflow_v2 import SessionsClient
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Dialogflow
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = r"C:\Games\small-talk"
DIALOGFLOW_PROJECT_ID = "small-talk-kbr9"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="6824744749:AAFv1mwZnsPiNI7CWu9yOz_UFjf1u_pJJHk")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Dialogflow
dialogflow_session_client = SessionsClient()
DIALOGFLOW_LANGUAGE_CODE = 'ru-RU'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    session = f"projects/{DIALOGFLOW_PROJECT_ID}/agent/sessions/{message.chat.id}"
    text_input = dialogflow.TextInput(text=message.text, language_code=DIALOGFLOW_LANGUAGE_CODE)
    query_input = dialogflow.QueryInput(text=text_input)
    response = dialogflow_session_client.detect_intent(request={"session": session, "query_input": query_input})

    await message.answer(response.query_result.fulfillment_text)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(start_button)

    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üëã\n\n"
                          "–°–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–∞–∑–¥–Ω—É–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ - "
                          "–ò–†–ò–¢-–†–¢–§! –ò –≤ —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∫–≤–∏–∑-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n"
                          "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: —Å 13:00 –¥–æ 15:00 –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ "
                          "<b>–ò–†–ò–¢-–†–¢–§</b>, –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –æ –∫–æ—Å–º–æ—Å–µ –∏ –æ –º–∏—Ä–µ IT.\n"
                          "–£–¥–∞—á–∏ –≤–∞–º –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–≤–∏–∑–∞ –∏ –ø—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç —Å–∞–º—ã–π —É–º–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π! ‚òò",
                 parse_mode='HTML',
                 reply_markup=markup
                 )


registered_users = set()  # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    global registered_users

    if message.from_user.id in registered_users:
        return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

    if message.text == "–ù–∞—á–∞—Ç—å":
        current_time = datetime.now()
        quiz_start_time = datetime(current_time.year, 2, 1, 13, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 13:00
        quiz_end_time = datetime(current_time.year, 2, 21, 15, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 15:00

        if quiz_start_time <= current_time <= quiz_end_time:
            if not is_user_registered(message.from_user.id):
                bot.reply_to(message, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û.")
                registered_users.add(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
                bot.register_next_step_handler(message, process_name_step)
            else:
                bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")
        else:
            bot.reply_to(message, "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")


def process_name_step(message):
    global user_data
    user_data = {"ID": message.from_user.id, "–§–ò–û": message.text}
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –í–ö.")
    bot.register_next_step_handler(message, process_vk_step)


def process_vk_step(message):
    user_data["–í–ö"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    status_button_1 = types.KeyboardButton("–®–∫–æ–ª—å–Ω–∏–∫")
    status_button_2 = types.KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç")
    markup.add(status_button_1, status_button_2)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    bot.register_next_step_handler(message, process_status_step)


def process_status_step(message):
    user_data["–°—Ç–∞—Ç—É—Å"] = message.text
    user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] = 0
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(message, process_secret_step)


def process_secret_step(message):
    global user_data, question_timers
    secret_word = "–†–¢–§"
    if message.text.strip() == secret_word:
        save_to_excel(user_data)
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        question_timers[message.chat.id] = time.time()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        send_question(message)
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_secret_step)



def save_to_excel(user_data):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    ws.append([user_data["ID"], user_data["–§–ò–û"], user_data["–í–ö"], user_data["–°—Ç–∞—Ç—É—Å"], user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"]])
    wb.save("participants.xlsx")


def is_user_registered(user_id):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(values_only=True):
        if row[0] == user_id:
            return True
    return False


def send_question(message):
    send_next_question(message, 0)


def send_next_question(message, question_index):
    if question_index < len(questions):
        question = questions[question_index]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        if "options" not in question:
            sent_message = bot.send_message(message.chat.id, f'–í–æ–ø—Ä–æ—Å {question_index + 1}: {question["question"]}', reply_markup=markup)
            bot.register_next_step_handler(sent_message, lambda m, q=question_index: check_answer_text(m, q, sent_message.message_id))
        else:
            options = [types.KeyboardButton(option) for option in question["options"]]
            markup.add(*options)
            if "photo" in question:
                photo_path = question["photo"]
                with open(photo_path, 'rb') as photo:
                    sent_message = bot.send_photo(message.chat.id, photo, caption=f'–í–æ–ø—Ä–æ—Å {question_index + 1}: {question["question"]}', reply_markup=markup)
                    bot.register_next_step_handler(sent_message, lambda m, q=question_index: check_answer(m, q, sent_message.message_id))
            else:
                sent_message = bot.send_message(message.chat.id, f'–í–æ–ø—Ä–æ—Å {question_index + 1}: {question["question"]}', reply_markup=markup)
                bot.register_next_step_handler(sent_message, lambda m, q=question_index: check_answer(m, q, sent_message.message_id))

        question_timers[message.chat.id] = time.time()
    else:
        bot.send_message(message.chat.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")

def check_time(message):
    global question_timers
    user_id = message.chat.id
    current_time = time.time()
    if user_id in question_timers:
        elapsed_time = current_time - question_timers[user_id]
        if elapsed_time >= 60:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞ (60 —Å–µ–∫—É–Ω–¥)
            bot.send_message(user_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ!")
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
            bot.delete_message(user_id, message.message_id)
            bot.delete_message(user_id, message.message_id - 1)
            del question_timers[user_id]  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return True
    return False

def check_answer(message, question_index, question_message_id):
    if check_time(message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        return
    user_answer = message.text
    correct_index = questions[question_index]["correct_index"]
    scores = questions[question_index]["scores"]
    if user_answer == questions[question_index]["options"][correct_index]:
        user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] += scores[correct_index]
    bot.delete_message(message.chat.id, question_message_id)
    bot.delete_message(message.chat.id, message.message_id)
    update_score_in_excel(user_data["ID"], user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])
    send_next_question(message, question_index + 1)

def check_answer_text(message, question_index, question_message_id):
    if check_time(message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        return
    user_answer = message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    correct_answer = questions[question_index]["correct_answer"].lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    scores = questions[question_index]["scores"]

    if user_answer == correct_answer:
        user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] += scores
    bot.delete_message(message.chat.id, question_message_id)
    bot.delete_message(message.chat.id, message.message_id)
    update_score_in_excel(user_data["ID"], user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])
    send_next_question(message, question_index + 1)
def update_score_in_excel(user_id, new_score):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    row_index = 0
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1, values_only=True):
        row_index += 1
        if row[0] == user_id:
            # Update the score in the fifth column (index 5 corresponds to column E)
            cell = ws.cell(row=row_index + 1, column=5)
            cell.value = new_score
            break
    wb.save("participants.xlsx")


bot.polling()
